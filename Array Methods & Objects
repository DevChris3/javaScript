// The Array.isArray() method returns true if an object is an array, otherwise false.

const arr2 = ('apple', 'orange', 'strawberry'); // output: false

const someArr = [43, 6, 15, 28]; // output: true

document.getElementById('demo4').innerHTML = Array.isArray(arr2);

document.getElementById('demo5').innerHTML = Array.isArray(someArr);

// The forEach() method calls a function once for each element in an array, in order.

const numbers = [1, 2, 3, 4, 5];

// one way to list each item in an array using forEach()
numbers.forEach(num => console.log(num));

// another way to list each item in an array using forEach()
numbers.forEach(myFunc) // create a function to loop through each element in an array

function myFunc(num){
  console.log(num); // [1, 2, 3, 4, 5]
}

// This Array method() creates an array filled with all the array elements that pass a test 
// provided by a function:

const filtered = [12, 23, 34, 17, 29, 38, 45, 56, 65, 50];

filtered.filter(checkAges);

document.getElementById('demo').innerHTML = filtered.filter(checkAges); // DISPLAY IN BROWSER

// declare the function (checkAges)
function checkAges(age){
  return age >= 50; // return a filtered array with elements that pass the test age greater > or equal to 50
}


// same filter method displayed in the console
const words = ['hello', 'bye', 'welcome', 'byebye', 'later', 'be back'];

const result = words.filter(word => word.length > 5); // returns all the words/strings with the length greater > than 5

console.log(result);


// This method check if array includes the item passed in the method.

console.log(words.includes('bye)) // output: true
console.log(words.includes('byee)) // output: false

// This method create new array by calling the provided function in every element.

const arrNumbers = [1, 2, 3, 4, 5, 6];

const numArr = arrNumbers.map(num => num + 1);

console.log(numArr);

// another way to use the map() method
// the map() function method 

numArr.map(arrayFunc);

function arrayFunc(num){
	console.log(num + 1);
}

const colors = ['blue', 'red', 'yellow', 'green'];

const newColor = colors.map(col => col + ' ' + 'color');

console.log(newColor);


// The reduce() method executes a reducer function for each value of an array.

const nums = [1, 2, 3, 4, 5];

document.getElementById('demo7').innerHTML = nums.reduce(numsFunc); display in the browser

function numsFunc(total, value){
	 return total + value;     // reduce() returns a single value which is the function's accumulated result.
}

// simplified code
console.log(nums.reduce((total, value) => total + value, 0));
                
// The slice() method returns selected elements in an array, as a new array.

// slice() selects the elements starting at the given start argument, and ends at, but does not include, the given end argument.

// slice() does not change the original array.

const duplicate = function(sliceArr){
	return sliceArr.slice(1); // (1) is the start argument
}

console.log(duplicate([1, 2, 4, 0])); // output: [1, 2, 3, 0]

// another EXAMPLE:

const duplicate = function(sliceArr){
	return sliceArr.slice(3, 5); // starts at 3 and ends at 5 but doesnt include the last elements
}

console.log(duplicate([1, 2, 3, 4, 5, 6, 0])); // output: [4, 5] 


// objects use names to access its 'members'
const people = {
name: 'Chris',
age: 100
};




for(let i = 0; i < 5; i++){
	console.log('Number' + i);
  if (i === 3) break;
}

// iterate through an array

const names = ['magic', 'bill', 'russell', 'lebron', 'jason'];

for(let i = 0; i < names.length; i ++){
	console.log(names[i]);
}

// another way to iterate through an array is for of

for(let name of names){
	console.log(name);
}

const user = {firstName: 'John', lastName: 'Doe'};

for(let key in user) console.log(user[key]);

const numbers = [1, 2, 3, 4, 5];

numbers.forEach(myFunction);

function myFunction(num){
	//const temLiteral = `Number ${num}`;
	console.log(num);
}

const checkIf = ['mango', 'banana', 'orange', 'apple'];

console.log(checkIf.includes('mangoo'));
console.log(checkIf.length);

let i = 0;
while(i < 10){
	console.log(i)
  i++;
}

const num1 = [1, 2, 3, 4, 5];

// const map1 = num1.map(x => x * 2);
num1.map(myFunc);

function myFunc(x){
	console.log(x * 2);
}

const words = ['first', 'second', 'third', 'fourth', 'fifth'];

words.map(wordFunc);

function wordFunc(mapping){
	console.log(mapping);
}

const everyOne = ['a', 'b', 'c'];

everyOne.forEach(anyThing => console.log(anyThing)); 

const reverseArr = ['one', 'two', 'three'];

console.log(reverseArr.reverse());

const greetings = ['Hello, I am Gary', 'Bye, see ya later', 'Welcome to sweettooth'];

// arrow functions
// greetings.forEach(greet => console.log(greet));

greetings.forEach(greetFunc);

function greetFunc(greet){
	console.log(greet);
}

// converts the elements of an array into a string
console.log(greetings.join(' '));

const arrString = ['this array', 'will turn', 'into a', 'string'];

console.log(arrString.join(' ')); // output: 'this array will turn into a string'

let vehicles = ['lexus', 'porsche', 'honda', 'audi'];

vehicles.push('bmw'); // add an item into the array
const cars = vehicles.push('maserati'); // returns the new array length

console.log(vehicles);
console.log(cars);

vehicles.pop(); // removes the last item in an array
console.log(vehicles);


// slice() method returns selected elements in an array
// starting at the given START arg and END arg but doesn't include the END arg

console.log(vehicles.slice(1, 3));

// adds and/or removes array elements
vehicles.splice(4, 5, 'kia', 'ford');
console.log(vehicles);

// using splice() method ti removes array elements
vehicles.splice(4, 5);
console.log(vehicles);

